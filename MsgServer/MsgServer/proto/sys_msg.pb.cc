// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sys_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sys_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pms {

namespace {

const ::google::protobuf::Descriptor* ConnMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelayMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelayMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sys_5fmsg_2eproto() {
  protobuf_AddDesc_sys_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sys_msg.proto");
  GOOGLE_CHECK(file != NULL);
  ConnMsg_descriptor_ = file->message_type(0);
  static const int ConnMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMsg, conn_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMsg, tr_module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMsg, moduleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMsg, transferid_),
  };
  ConnMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnMsg_descriptor_,
      ConnMsg::default_instance_,
      ConnMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnMsg));
  RelayMsg_descriptor_ = file->message_type(1);
  static const int RelayMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayMsg, svr_cmds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayMsg, tr_module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayMsg, connector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayMsg, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayMsg, touser_),
  };
  RelayMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelayMsg_descriptor_,
      RelayMsg::default_instance_,
      RelayMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelayMsg));
  TransferMsg_descriptor_ = file->message_type(2);
  static const int TransferMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMsg, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMsg, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMsg, content_),
  };
  TransferMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferMsg_descriptor_,
      TransferMsg::default_instance_,
      TransferMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sys_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnMsg_descriptor_, &ConnMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelayMsg_descriptor_, &RelayMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferMsg_descriptor_, &TransferMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sys_5fmsg_2eproto() {
  delete ConnMsg::default_instance_;
  delete ConnMsg_reflection_;
  delete RelayMsg::default_instance_;
  delete RelayMsg_reflection_;
  delete TransferMsg::default_instance_;
  delete TransferMsg_reflection_;
}

void protobuf_AddDesc_sys_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pms::protobuf_AddDesc_common_5fmsg_2eproto();
  ::pms::protobuf_AddDesc_sys_5fmsg_5ftype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsys_msg.proto\022\003pms\032\020common_msg.proto\032\022"
    "sys_msg_type.proto\"y\n\007ConnMsg\022\037\n\010conn_ta"
    "g\030\001 \001(\0162\r.pms.EConnTag\022\'\n\ttr_module\030\002 \001("
    "\0162\024.pms.ETransferModule\022\020\n\010moduleid\030\003 \001("
    "\t\022\022\n\ntransferid\030\004 \001(\t\"\227\001\n\010RelayMsg\022!\n\010sv"
    "r_cmds\030\001 \001(\0162\017.pms.EServerCmd\022\'\n\ttr_modu"
    "le\030\002 \001(\0162\024.pms.ETransferModule\022\021\n\tconnec"
    "tor\030\003 \001(\t\022\017\n\007content\030\004 \001(\014\022\033\n\006touser\030\005 \001"
    "(\0132\013.pms.ToUser\"\235\001\n\013TransferMsg\022 \n\004type\030"
    "\001 \001(\0162\022.pms.ETransferType\022(\n\004flag\030\002 \001(\0162"
    "\022.pms.ETransferFlag:\006FNOACK\0221\n\010priority\030"
    "\003 \001(\0162\026.pms.ETransferPriority:\007PNORMAL\022\017"
    "\n\007content\030\004 \001(\014", 495);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sys_msg.proto", &protobuf_RegisterTypes);
  ConnMsg::default_instance_ = new ConnMsg();
  RelayMsg::default_instance_ = new RelayMsg();
  TransferMsg::default_instance_ = new TransferMsg();
  ConnMsg::default_instance_->InitAsDefaultInstance();
  RelayMsg::default_instance_->InitAsDefaultInstance();
  TransferMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sys_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sys_5fmsg_2eproto {
  StaticDescriptorInitializer_sys_5fmsg_2eproto() {
    protobuf_AddDesc_sys_5fmsg_2eproto();
  }
} static_descriptor_initializer_sys_5fmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ConnMsg::kConnTagFieldNumber;
const int ConnMsg::kTrModuleFieldNumber;
const int ConnMsg::kModuleidFieldNumber;
const int ConnMsg::kTransferidFieldNumber;
#endif  // !_MSC_VER

ConnMsg::ConnMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pms.ConnMsg)
}

void ConnMsg::InitAsDefaultInstance() {
}

ConnMsg::ConnMsg(const ConnMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pms.ConnMsg)
}

void ConnMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  conn_tag_ = 1;
  tr_module_ = 1;
  moduleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transferid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMsg::~ConnMsg() {
  // @@protoc_insertion_point(destructor:pms.ConnMsg)
  SharedDtor();
}

void ConnMsg::SharedDtor() {
  if (moduleid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete moduleid_;
  }
  if (transferid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete transferid_;
  }
  if (this != default_instance_) {
  }
}

void ConnMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMsg_descriptor_;
}

const ConnMsg& ConnMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sys_5fmsg_2eproto();
  return *default_instance_;
}

ConnMsg* ConnMsg::default_instance_ = NULL;

ConnMsg* ConnMsg::New() const {
  return new ConnMsg;
}

void ConnMsg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    conn_tag_ = 1;
    tr_module_ = 1;
    if (has_moduleid()) {
      if (moduleid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        moduleid_->clear();
      }
    }
    if (has_transferid()) {
      if (transferid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        transferid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pms.ConnMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pms.EConnTag conn_tag = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pms::EConnTag_IsValid(value)) {
            set_conn_tag(static_cast< ::pms::EConnTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tr_module;
        break;
      }

      // optional .pms.ETransferModule tr_module = 2;
      case 2: {
        if (tag == 16) {
         parse_tr_module:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pms::ETransferModule_IsValid(value)) {
            set_tr_module(static_cast< ::pms::ETransferModule >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_moduleid;
        break;
      }

      // optional string moduleid = 3;
      case 3: {
        if (tag == 26) {
         parse_moduleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moduleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->moduleid().data(), this->moduleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "moduleid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transferid;
        break;
      }

      // optional string transferid = 4;
      case 4: {
        if (tag == 34) {
         parse_transferid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transferid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->transferid().data(), this->transferid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transferid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pms.ConnMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pms.ConnMsg)
  return false;
#undef DO_
}

void ConnMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pms.ConnMsg)
  // optional .pms.EConnTag conn_tag = 1;
  if (has_conn_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->conn_tag(), output);
  }

  // optional .pms.ETransferModule tr_module = 2;
  if (has_tr_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tr_module(), output);
  }

  // optional string moduleid = 3;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moduleid().data(), this->moduleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "moduleid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->moduleid(), output);
  }

  // optional string transferid = 4;
  if (has_transferid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transferid().data(), this->transferid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transferid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->transferid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pms.ConnMsg)
}

::google::protobuf::uint8* ConnMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pms.ConnMsg)
  // optional .pms.EConnTag conn_tag = 1;
  if (has_conn_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->conn_tag(), target);
  }

  // optional .pms.ETransferModule tr_module = 2;
  if (has_tr_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tr_module(), target);
  }

  // optional string moduleid = 3;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->moduleid().data(), this->moduleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "moduleid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->moduleid(), target);
  }

  // optional string transferid = 4;
  if (has_transferid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->transferid().data(), this->transferid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transferid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->transferid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pms.ConnMsg)
  return target;
}

int ConnMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pms.EConnTag conn_tag = 1;
    if (has_conn_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->conn_tag());
    }

    // optional .pms.ETransferModule tr_module = 2;
    if (has_tr_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tr_module());
    }

    // optional string moduleid = 3;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moduleid());
    }

    // optional string transferid = 4;
    if (has_transferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transferid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMsg::MergeFrom(const ConnMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conn_tag()) {
      set_conn_tag(from.conn_tag());
    }
    if (from.has_tr_module()) {
      set_tr_module(from.tr_module());
    }
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_transferid()) {
      set_transferid(from.transferid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMsg::CopyFrom(const ConnMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMsg::IsInitialized() const {

  return true;
}

void ConnMsg::Swap(ConnMsg* other) {
  if (other != this) {
    std::swap(conn_tag_, other->conn_tag_);
    std::swap(tr_module_, other->tr_module_);
    std::swap(moduleid_, other->moduleid_);
    std::swap(transferid_, other->transferid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMsg_descriptor_;
  metadata.reflection = ConnMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelayMsg::kSvrCmdsFieldNumber;
const int RelayMsg::kTrModuleFieldNumber;
const int RelayMsg::kConnectorFieldNumber;
const int RelayMsg::kContentFieldNumber;
const int RelayMsg::kTouserFieldNumber;
#endif  // !_MSC_VER

RelayMsg::RelayMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pms.RelayMsg)
}

void RelayMsg::InitAsDefaultInstance() {
  touser_ = const_cast< ::pms::ToUser*>(&::pms::ToUser::default_instance());
}

RelayMsg::RelayMsg(const RelayMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pms.RelayMsg)
}

void RelayMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svr_cmds_ = 1;
  tr_module_ = 1;
  connector_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touser_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelayMsg::~RelayMsg() {
  // @@protoc_insertion_point(destructor:pms.RelayMsg)
  SharedDtor();
}

void RelayMsg::SharedDtor() {
  if (connector_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete connector_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete touser_;
  }
}

void RelayMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelayMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelayMsg_descriptor_;
}

const RelayMsg& RelayMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sys_5fmsg_2eproto();
  return *default_instance_;
}

RelayMsg* RelayMsg::default_instance_ = NULL;

RelayMsg* RelayMsg::New() const {
  return new RelayMsg;
}

void RelayMsg::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    svr_cmds_ = 1;
    tr_module_ = 1;
    if (has_connector()) {
      if (connector_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        connector_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_touser()) {
      if (touser_ != NULL) touser_->::pms::ToUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelayMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pms.RelayMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pms.EServerCmd svr_cmds = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pms::EServerCmd_IsValid(value)) {
            set_svr_cmds(static_cast< ::pms::EServerCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tr_module;
        break;
      }

      // optional .pms.ETransferModule tr_module = 2;
      case 2: {
        if (tag == 16) {
         parse_tr_module:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pms::ETransferModule_IsValid(value)) {
            set_tr_module(static_cast< ::pms::ETransferModule >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_connector;
        break;
      }

      // optional string connector = 3;
      case 3: {
        if (tag == 26) {
         parse_connector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connector()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connector().data(), this->connector().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "connector");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_touser;
        break;
      }

      // optional .pms.ToUser touser = 5;
      case 5: {
        if (tag == 42) {
         parse_touser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pms.RelayMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pms.RelayMsg)
  return false;
#undef DO_
}

void RelayMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pms.RelayMsg)
  // optional .pms.EServerCmd svr_cmds = 1;
  if (has_svr_cmds()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->svr_cmds(), output);
  }

  // optional .pms.ETransferModule tr_module = 2;
  if (has_tr_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tr_module(), output);
  }

  // optional string connector = 3;
  if (has_connector()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connector().data(), this->connector().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->connector(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // optional .pms.ToUser touser = 5;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->touser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pms.RelayMsg)
}

::google::protobuf::uint8* RelayMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pms.RelayMsg)
  // optional .pms.EServerCmd svr_cmds = 1;
  if (has_svr_cmds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->svr_cmds(), target);
  }

  // optional .pms.ETransferModule tr_module = 2;
  if (has_tr_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tr_module(), target);
  }

  // optional string connector = 3;
  if (has_connector()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connector().data(), this->connector().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "connector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connector(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional .pms.ToUser touser = 5;
  if (has_touser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->touser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pms.RelayMsg)
  return target;
}

int RelayMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pms.EServerCmd svr_cmds = 1;
    if (has_svr_cmds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->svr_cmds());
    }

    // optional .pms.ETransferModule tr_module = 2;
    if (has_tr_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tr_module());
    }

    // optional string connector = 3;
    if (has_connector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connector());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional .pms.ToUser touser = 5;
    if (has_touser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->touser());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelayMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelayMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelayMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelayMsg::MergeFrom(const RelayMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_cmds()) {
      set_svr_cmds(from.svr_cmds());
    }
    if (from.has_tr_module()) {
      set_tr_module(from.tr_module());
    }
    if (from.has_connector()) {
      set_connector(from.connector());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_touser()) {
      mutable_touser()->::pms::ToUser::MergeFrom(from.touser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelayMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelayMsg::CopyFrom(const RelayMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayMsg::IsInitialized() const {

  return true;
}

void RelayMsg::Swap(RelayMsg* other) {
  if (other != this) {
    std::swap(svr_cmds_, other->svr_cmds_);
    std::swap(tr_module_, other->tr_module_);
    std::swap(connector_, other->connector_);
    std::swap(content_, other->content_);
    std::swap(touser_, other->touser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelayMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelayMsg_descriptor_;
  metadata.reflection = RelayMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferMsg::kTypeFieldNumber;
const int TransferMsg::kFlagFieldNumber;
const int TransferMsg::kPriorityFieldNumber;
const int TransferMsg::kContentFieldNumber;
#endif  // !_MSC_VER

TransferMsg::TransferMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pms.TransferMsg)
}

void TransferMsg::InitAsDefaultInstance() {
}

TransferMsg::TransferMsg(const TransferMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pms.TransferMsg)
}

void TransferMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  flag_ = 1;
  priority_ = 2;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferMsg::~TransferMsg() {
  // @@protoc_insertion_point(destructor:pms.TransferMsg)
  SharedDtor();
}

void TransferMsg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void TransferMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferMsg_descriptor_;
}

const TransferMsg& TransferMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sys_5fmsg_2eproto();
  return *default_instance_;
}

TransferMsg* TransferMsg::default_instance_ = NULL;

TransferMsg* TransferMsg::New() const {
  return new TransferMsg;
}

void TransferMsg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    flag_ = 1;
    priority_ = 2;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pms.TransferMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pms.ETransferType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pms::ETransferType_IsValid(value)) {
            set_type(static_cast< ::pms::ETransferType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional .pms.ETransferFlag flag = 2 [default = FNOACK];
      case 2: {
        if (tag == 16) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pms::ETransferFlag_IsValid(value)) {
            set_flag(static_cast< ::pms::ETransferFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // optional .pms.ETransferPriority priority = 3 [default = PNORMAL];
      case 3: {
        if (tag == 24) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pms::ETransferPriority_IsValid(value)) {
            set_priority(static_cast< ::pms::ETransferPriority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pms.TransferMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pms.TransferMsg)
  return false;
#undef DO_
}

void TransferMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pms.TransferMsg)
  // optional .pms.ETransferType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pms.ETransferFlag flag = 2 [default = FNOACK];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->flag(), output);
  }

  // optional .pms.ETransferPriority priority = 3 [default = PNORMAL];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->priority(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pms.TransferMsg)
}

::google::protobuf::uint8* TransferMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pms.TransferMsg)
  // optional .pms.ETransferType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pms.ETransferFlag flag = 2 [default = FNOACK];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->flag(), target);
  }

  // optional .pms.ETransferPriority priority = 3 [default = PNORMAL];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->priority(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pms.TransferMsg)
  return target;
}

int TransferMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pms.ETransferType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pms.ETransferFlag flag = 2 [default = FNOACK];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // optional .pms.ETransferPriority priority = 3 [default = PNORMAL];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferMsg::MergeFrom(const TransferMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferMsg::CopyFrom(const TransferMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferMsg::IsInitialized() const {

  return true;
}

void TransferMsg::Swap(TransferMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(priority_, other->priority_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferMsg_descriptor_;
  metadata.reflection = TransferMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pms

// @@protoc_insertion_point(global_scope)
