// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sequence_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sequence_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace pms {

void protobuf_ShutdownFile_sequence_5fmsg_2eproto() {
  delete SequenceMsg::default_instance_;
  delete PackedSeqnMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_sequence_5fmsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_sequence_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SequenceMsg::default_instance_ = new SequenceMsg();
  PackedSeqnMsg::default_instance_ = new PackedSeqnMsg();
  SequenceMsg::default_instance_->InitAsDefaultInstance();
  PackedSeqnMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sequence_5fmsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sequence_5fmsg_2eproto_once_);
void protobuf_AddDesc_sequence_5fmsg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sequence_5fmsg_2eproto_once_,
                 &protobuf_AddDesc_sequence_5fmsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sequence_5fmsg_2eproto {
  StaticDescriptorInitializer_sequence_5fmsg_2eproto() {
    protobuf_AddDesc_sequence_5fmsg_2eproto();
  }
} static_descriptor_initializer_sequence_5fmsg_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceMsg::kUseridFieldNumber;
const int SequenceMsg::kMsgidFieldNumber;
const int SequenceMsg::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceMsg::SequenceMsg()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pms.SequenceMsg)
}

void SequenceMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SequenceMsg::SequenceMsg(const SequenceMsg& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pms.SequenceMsg)
}

void SequenceMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = GOOGLE_LONGLONG(0);
}

SequenceMsg::~SequenceMsg() {
  // @@protoc_insertion_point(destructor:pms.SequenceMsg)
  SharedDtor();
}

void SequenceMsg::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SequenceMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SequenceMsg& SequenceMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sequence_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_5fmsg_2eproto();
#endif
  return *default_instance_;
}

SequenceMsg* SequenceMsg::default_instance_ = NULL;

SequenceMsg* SequenceMsg::New(::google::protobuf::Arena* arena) const {
  SequenceMsg* n = new SequenceMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SequenceMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pms.SequenceMsg)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_ = GOOGLE_LONGLONG(0);
}

bool SequenceMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pms.SequenceMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pms.SequenceMsg.userid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgid;
        break;
      }

      // optional string msgid = 2;
      case 2: {
        if (tag == 18) {
         parse_msgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pms.SequenceMsg.msgid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sequence;
        break;
      }

      // optional sint64 sequence = 3;
      case 3: {
        if (tag == 24) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sequence_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pms.SequenceMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pms.SequenceMsg)
  return false;
#undef DO_
}

void SequenceMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pms.SequenceMsg)
  // optional string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pms.SequenceMsg.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string msgid = 2;
  if (this->msgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pms.SequenceMsg.msgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msgid(), output);
  }

  // optional sint64 sequence = 3;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->sequence(), output);
  }

  // @@protoc_insertion_point(serialize_end:pms.SequenceMsg)
}

int SequenceMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pms.SequenceMsg)
  int total_size = 0;

  // optional string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string msgid = 2;
  if (this->msgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgid());
  }

  // optional sint64 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->sequence());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SequenceMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SequenceMsg*>(&from));
}

void SequenceMsg::MergeFrom(const SequenceMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pms.SequenceMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.msgid().size() > 0) {

    msgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgid_);
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
}

void SequenceMsg::CopyFrom(const SequenceMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pms.SequenceMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceMsg::IsInitialized() const {

  return true;
}

void SequenceMsg::Swap(SequenceMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceMsg::InternalSwap(SequenceMsg* other) {
  userid_.Swap(&other->userid_);
  msgid_.Swap(&other->msgid_);
  std::swap(sequence_, other->sequence_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SequenceMsg::GetTypeName() const {
  return "pms.SequenceMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SequenceMsg

// optional string userid = 1;
void SequenceMsg::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SequenceMsg::userid() const {
  // @@protoc_insertion_point(field_get:pms.SequenceMsg.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SequenceMsg::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.SequenceMsg.userid)
}
 void SequenceMsg::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.SequenceMsg.userid)
}
 void SequenceMsg::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.SequenceMsg.userid)
}
 ::std::string* SequenceMsg::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:pms.SequenceMsg.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SequenceMsg::release_userid() {
  // @@protoc_insertion_point(field_release:pms.SequenceMsg.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SequenceMsg::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:pms.SequenceMsg.userid)
}

// optional string msgid = 2;
void SequenceMsg::clear_msgid() {
  msgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SequenceMsg::msgid() const {
  // @@protoc_insertion_point(field_get:pms.SequenceMsg.msgid)
  return msgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SequenceMsg::set_msgid(const ::std::string& value) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.SequenceMsg.msgid)
}
 void SequenceMsg::set_msgid(const char* value) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.SequenceMsg.msgid)
}
 void SequenceMsg::set_msgid(const char* value, size_t size) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.SequenceMsg.msgid)
}
 ::std::string* SequenceMsg::mutable_msgid() {
  
  // @@protoc_insertion_point(field_mutable:pms.SequenceMsg.msgid)
  return msgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SequenceMsg::release_msgid() {
  // @@protoc_insertion_point(field_release:pms.SequenceMsg.msgid)
  
  return msgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SequenceMsg::set_allocated_msgid(::std::string* msgid) {
  if (msgid != NULL) {
    
  } else {
    
  }
  msgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgid);
  // @@protoc_insertion_point(field_set_allocated:pms.SequenceMsg.msgid)
}

// optional sint64 sequence = 3;
void SequenceMsg::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SequenceMsg::sequence() const {
  // @@protoc_insertion_point(field_get:pms.SequenceMsg.sequence)
  return sequence_;
}
 void SequenceMsg::set_sequence(::google::protobuf::int64 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:pms.SequenceMsg.sequence)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackedSeqnMsg::kMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackedSeqnMsg::PackedSeqnMsg()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pms.PackedSeqnMsg)
}

void PackedSeqnMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PackedSeqnMsg::PackedSeqnMsg(const PackedSeqnMsg& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pms.PackedSeqnMsg)
}

void PackedSeqnMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PackedSeqnMsg::~PackedSeqnMsg() {
  // @@protoc_insertion_point(destructor:pms.PackedSeqnMsg)
  SharedDtor();
}

void PackedSeqnMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PackedSeqnMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PackedSeqnMsg& PackedSeqnMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sequence_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sequence_5fmsg_2eproto();
#endif
  return *default_instance_;
}

PackedSeqnMsg* PackedSeqnMsg::default_instance_ = NULL;

PackedSeqnMsg* PackedSeqnMsg::New(::google::protobuf::Arena* arena) const {
  PackedSeqnMsg* n = new PackedSeqnMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackedSeqnMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pms.PackedSeqnMsg)
  msgs_.Clear();
}

bool PackedSeqnMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pms.PackedSeqnMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pms.SequenceMsg msgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_msgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_msgs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pms.PackedSeqnMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pms.PackedSeqnMsg)
  return false;
#undef DO_
}

void PackedSeqnMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pms.PackedSeqnMsg)
  // repeated .pms.SequenceMsg msgs = 1;
  for (unsigned int i = 0, n = this->msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msgs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pms.PackedSeqnMsg)
}

int PackedSeqnMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pms.PackedSeqnMsg)
  int total_size = 0;

  // repeated .pms.SequenceMsg msgs = 1;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackedSeqnMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PackedSeqnMsg*>(&from));
}

void PackedSeqnMsg::MergeFrom(const PackedSeqnMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pms.PackedSeqnMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgs_.MergeFrom(from.msgs_);
}

void PackedSeqnMsg::CopyFrom(const PackedSeqnMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pms.PackedSeqnMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackedSeqnMsg::IsInitialized() const {

  return true;
}

void PackedSeqnMsg::Swap(PackedSeqnMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackedSeqnMsg::InternalSwap(PackedSeqnMsg* other) {
  msgs_.UnsafeArenaSwap(&other->msgs_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PackedSeqnMsg::GetTypeName() const {
  return "pms.PackedSeqnMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackedSeqnMsg

// repeated .pms.SequenceMsg msgs = 1;
int PackedSeqnMsg::msgs_size() const {
  return msgs_.size();
}
void PackedSeqnMsg::clear_msgs() {
  msgs_.Clear();
}
const ::pms::SequenceMsg& PackedSeqnMsg::msgs(int index) const {
  // @@protoc_insertion_point(field_get:pms.PackedSeqnMsg.msgs)
  return msgs_.Get(index);
}
::pms::SequenceMsg* PackedSeqnMsg::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:pms.PackedSeqnMsg.msgs)
  return msgs_.Mutable(index);
}
::pms::SequenceMsg* PackedSeqnMsg::add_msgs() {
  // @@protoc_insertion_point(field_add:pms.PackedSeqnMsg.msgs)
  return msgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::pms::SequenceMsg >*
PackedSeqnMsg::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:pms.PackedSeqnMsg.msgs)
  return &msgs_;
}
const ::google::protobuf::RepeatedPtrField< ::pms::SequenceMsg >&
PackedSeqnMsg::msgs() const {
  // @@protoc_insertion_point(field_list:pms.PackedSeqnMsg.msgs)
  return msgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pms

// @@protoc_insertion_point(global_scope)
