// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meet_msg.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "MeetMsg.pbobjc.h"
#import "CommonMsg.pbobjc.h"
#import "MeetMsgType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MeetMsgRoot

@implementation MeetMsgRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[CommonMsgRoot extensionRegistry]];
    [registry addExtensions:[MeetMsgTypeRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - MeetMsgRoot_FileDescriptor

static GPBFileDescriptor *MeetMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pms"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Login

@implementation Login

@dynamic usrFrom;
@dynamic usrToken;
@dynamic usrNname;

typedef struct Login__storage_ {
  uint32_t _has_storage_[1];
  NSString *usrFrom;
  NSString *usrToken;
  NSString *usrNname;
} Login__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usrFrom",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_UsrFrom,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Login__storage_, usrFrom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usrToken",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_UsrToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Login__storage_, usrToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usrNname",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_UsrNname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Login__storage_, usrNname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Login class]
                                     rootClass:[MeetMsgRoot class]
                                          file:MeetMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Login__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Logout

@implementation Logout

@dynamic usrFrom;
@dynamic usrToken;

typedef struct Logout__storage_ {
  uint32_t _has_storage_[1];
  NSString *usrFrom;
  NSString *usrToken;
} Logout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usrFrom",
        .dataTypeSpecific.className = NULL,
        .number = Logout_FieldNumber_UsrFrom,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Logout__storage_, usrFrom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usrToken",
        .dataTypeSpecific.className = NULL,
        .number = Logout_FieldNumber_UsrToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Logout__storage_, usrToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Logout class]
                                     rootClass:[MeetMsgRoot class]
                                          file:MeetMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Logout__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Keep

@implementation Keep

@dynamic usrFrom;

typedef struct Keep__storage_ {
  uint32_t _has_storage_[1];
  NSString *usrFrom;
} Keep__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usrFrom",
        .dataTypeSpecific.className = NULL,
        .number = Keep_FieldNumber_UsrFrom,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Keep__storage_, usrFrom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Keep class]
                                     rootClass:[MeetMsgRoot class]
                                          file:MeetMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Keep__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MeetMsg

@implementation MeetMsg

@dynamic msgHead;
@dynamic msgTag;
@dynamic msgType;
@dynamic usrFrom;
@dynamic msgCont;
@dynamic romId;
@dynamic romName;
@dynamic nckName;
@dynamic usrToken;
@dynamic msgSeqs;
@dynamic memNum;
@dynamic hasUsrToto, usrToto;

typedef struct MeetMsg__storage_ {
  uint32_t _has_storage_[1];
  EMsgHead msgHead;
  EMsgTag msgTag;
  EMsgType msgType;
  int32_t memNum;
  NSString *usrFrom;
  NSString *msgCont;
  NSString *romId;
  NSString *romName;
  NSString *nckName;
  NSString *usrToken;
  ToUser *usrToto;
  int64_t msgSeqs;
} MeetMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgHead",
        .dataTypeSpecific.enumDescFunc = EMsgHead_EnumDescriptor,
        .number = MeetMsg_FieldNumber_MsgHead,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, msgHead),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgTag",
        .dataTypeSpecific.enumDescFunc = EMsgTag_EnumDescriptor,
        .number = MeetMsg_FieldNumber_MsgTag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, msgTag),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.enumDescFunc = EMsgType_EnumDescriptor,
        .number = MeetMsg_FieldNumber_MsgType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, msgType),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "usrFrom",
        .dataTypeSpecific.className = NULL,
        .number = MeetMsg_FieldNumber_UsrFrom,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, usrFrom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgCont",
        .dataTypeSpecific.className = NULL,
        .number = MeetMsg_FieldNumber_MsgCont,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, msgCont),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "romId",
        .dataTypeSpecific.className = NULL,
        .number = MeetMsg_FieldNumber_RomId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, romId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "romName",
        .dataTypeSpecific.className = NULL,
        .number = MeetMsg_FieldNumber_RomName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, romName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nckName",
        .dataTypeSpecific.className = NULL,
        .number = MeetMsg_FieldNumber_NckName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, nckName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "usrToken",
        .dataTypeSpecific.className = NULL,
        .number = MeetMsg_FieldNumber_UsrToken,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, usrToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgSeqs",
        .dataTypeSpecific.className = NULL,
        .number = MeetMsg_FieldNumber_MsgSeqs,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, msgSeqs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "memNum",
        .dataTypeSpecific.className = NULL,
        .number = MeetMsg_FieldNumber_MemNum,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, memNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "usrToto",
        .dataTypeSpecific.className = GPBStringifySymbol(ToUser),
        .number = MeetMsg_FieldNumber_UsrToto,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(MeetMsg__storage_, usrToto),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MeetMsg class]
                                     rootClass:[MeetMsgRoot class]
                                          file:MeetMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MeetMsg__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MeetMsg_MsgHead_RawValue(MeetMsg *message) {
  GPBDescriptor *descriptor = [MeetMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MeetMsg_FieldNumber_MsgHead];
  return GPBGetMessageInt32Field(message, field);
}

void SetMeetMsg_MsgHead_RawValue(MeetMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [MeetMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MeetMsg_FieldNumber_MsgHead];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t MeetMsg_MsgTag_RawValue(MeetMsg *message) {
  GPBDescriptor *descriptor = [MeetMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MeetMsg_FieldNumber_MsgTag];
  return GPBGetMessageInt32Field(message, field);
}

void SetMeetMsg_MsgTag_RawValue(MeetMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [MeetMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MeetMsg_FieldNumber_MsgTag];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t MeetMsg_MsgType_RawValue(MeetMsg *message) {
  GPBDescriptor *descriptor = [MeetMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MeetMsg_FieldNumber_MsgType];
  return GPBGetMessageInt32Field(message, field);
}

void SetMeetMsg_MsgType_RawValue(MeetMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [MeetMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MeetMsg_FieldNumber_MsgType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
