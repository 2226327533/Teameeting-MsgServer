// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_msg.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum EServerCmd

/// the server cmd
typedef GPB_ENUM(EServerCmd) {
  /// Value used if any message's field encounters a value that is not defined
  /// by this enum. The message will also have C functions to get/set the rawValue
  /// of the field.
  EServerCmd_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  EServerCmd_Clogin = 0,
  EServerCmd_Csndmsg = 1,
  EServerCmd_Cgetmsg = 2,
  EServerCmd_Clogout = 3,
  EServerCmd_Ckeepalive = 4,
  EServerCmd_Csyncseqn = 5,
  EServerCmd_Csseqn4Data = 6,
  EServerCmd_Csyncdata = 7,
  EServerCmd_Csyncgroupdata = 8,
  EServerCmd_Cnewmsg = 9,
  EServerCmd_Cnewmsgseqn = 10,
  EServerCmd_Cnewmsgdata = 11,
  EServerCmd_Cgroupnotify = 12,
};

GPBEnumDescriptor *EServerCmd_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL EServerCmd_IsValidValue(int32_t value);

#pragma mark - Enum EModuleType

/// different server module
/// the module means different business
/// it used between client and server
/// it can tell server this client belong to which server
typedef GPB_ENUM(EModuleType) {
  /// Value used if any message's field encounters a value that is not defined
  /// by this enum. The message will also have C functions to get/set the rawValue
  /// of the field.
  EModuleType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  EModuleType_Tinvalid0 = 0,
  EModuleType_Tinvalid1 = 1,
  EModuleType_Tmeeting = 2,
  EModuleType_Tp2P = 3,
  EModuleType_Tlive = 4,
  EModuleType_Tcallcenter = 5,
  EModuleType_Tlogical = 6,
  EModuleType_Tsequence = 7,
  EModuleType_Tstorage = 8,
  EModuleType_Tgrpnotify = 9,
};

GPBEnumDescriptor *EModuleType_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL EModuleType_IsValidValue(int32_t value);

#pragma mark - Enum EMsgFlag

/// the msg flag
typedef GPB_ENUM(EMsgFlag) {
  /// Value used if any message's field encounters a value that is not defined
  /// by this enum. The message will also have C functions to get/set the rawValue
  /// of the field.
  EMsgFlag_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  EMsgFlag_Finvalid = 0,
  EMsgFlag_Fsingle = 1,
  EMsgFlag_Fmulti = 2,
  EMsgFlag_Fgroup = 3,
};

GPBEnumDescriptor *EMsgFlag_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL EMsgFlag_IsValidValue(int32_t value);

#pragma mark - Enum EMsgRole

/// the msg role
typedef GPB_ENUM(EMsgRole) {
  /// Value used if any message's field encounters a value that is not defined
  /// by this enum. The message will also have C functions to get/set the rawValue
  /// of the field.
  EMsgRole_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /// sender
  EMsgRole_Rsender = 0,

  /// recver
  EMsgRole_Rrecver = 1,
};

GPBEnumDescriptor *EMsgRole_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL EMsgRole_IsValidValue(int32_t value);

#pragma mark - Enum EMsgRType

/// the msg read type
typedef GPB_ENUM(EMsgRType) {
  /// Value used if any message's field encounters a value that is not defined
  /// by this enum. The message will also have C functions to get/set the rawValue
  /// of the field.
  EMsgRType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /// read local logcal server
  EMsgRType_Rreadlocal = 0,

  /// read remote sequence/storage server
  EMsgRType_Rreadremote = 1,
};

GPBEnumDescriptor *EMsgRType_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL EMsgRType_IsValidValue(int32_t value);

#pragma mark - CommonMsgRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface CommonMsgRoot : GPBRootObject
@end

#pragma mark - MsgReq

typedef GPB_ENUM(MsgReq_FieldNumber) {
  MsgReq_FieldNumber_SvrCmds = 1,
  MsgReq_FieldNumber_ModType = 2,
  MsgReq_FieldNumber_Content = 3,
};

/// this is for request
@interface MsgReq : GPBMessage

@property(nonatomic, readwrite) EServerCmd svrCmds;

@property(nonatomic, readwrite) EModuleType modType;

@property(nonatomic, readwrite, copy, null_resettable) NSData *content;

@end

/// Fetches the raw value of a @c MsgReq's @c svrCmds property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t MsgReq_SvrCmds_RawValue(MsgReq *message);
/// Sets the raw value of an @c MsgReq's @c svrCmds property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetMsgReq_SvrCmds_RawValue(MsgReq *message, int32_t value);

/// Fetches the raw value of a @c MsgReq's @c modType property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t MsgReq_ModType_RawValue(MsgReq *message);
/// Sets the raw value of an @c MsgReq's @c modType property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetMsgReq_ModType_RawValue(MsgReq *message, int32_t value);

#pragma mark - MsgRep

typedef GPB_ENUM(MsgRep_FieldNumber) {
  MsgRep_FieldNumber_SvrCmds = 1,
  MsgRep_FieldNumber_ModType = 2,
  MsgRep_FieldNumber_RspCont = 3,
  MsgRep_FieldNumber_RspCode = 4,
};

/// this is for response
@interface MsgRep : GPBMessage

@property(nonatomic, readwrite) EServerCmd svrCmds;

@property(nonatomic, readwrite) EModuleType modType;

@property(nonatomic, readwrite, copy, null_resettable) NSData *rspCont;

@property(nonatomic, readwrite) int32_t rspCode;

@end

/// Fetches the raw value of a @c MsgRep's @c svrCmds property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t MsgRep_SvrCmds_RawValue(MsgRep *message);
/// Sets the raw value of an @c MsgRep's @c svrCmds property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetMsgRep_SvrCmds_RawValue(MsgRep *message, int32_t value);

/// Fetches the raw value of a @c MsgRep's @c modType property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t MsgRep_ModType_RawValue(MsgRep *message);
/// Sets the raw value of an @c MsgRep's @c modType property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetMsgRep_ModType_RawValue(MsgRep *message, int32_t value);

#pragma mark - ToUser

typedef GPB_ENUM(ToUser_FieldNumber) {
  ToUser_FieldNumber_UsersArray = 1,
};

/// users send to
@interface ToUser : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *usersArray;
/// The number of items in @c usersArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger usersArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
