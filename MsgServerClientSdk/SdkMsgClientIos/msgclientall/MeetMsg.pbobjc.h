// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meet_msg.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ToUser;
GPB_ENUM_FWD_DECLARE(EMsgHead);
GPB_ENUM_FWD_DECLARE(EMsgTag);
GPB_ENUM_FWD_DECLARE(EMsgType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - MeetMsgRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface MeetMsgRoot : GPBRootObject
@end

#pragma mark - Login

typedef GPB_ENUM(Login_FieldNumber) {
  Login_FieldNumber_UsrFrom = 1,
  Login_FieldNumber_UsrToken = 2,
  Login_FieldNumber_UsrNname = 3,
};

@interface Login : GPBMessage

/// user id sending from
@property(nonatomic, readwrite, copy, null_resettable) NSString *usrFrom;
/// Test to see if @c usrFrom has been set.
@property(nonatomic, readwrite) BOOL hasUsrFrom;

/// user token
@property(nonatomic, readwrite, copy, null_resettable) NSString *usrToken;
/// Test to see if @c usrToken has been set.
@property(nonatomic, readwrite) BOOL hasUsrToken;

@property(nonatomic, readwrite, copy, null_resettable) NSString *usrNname;
/// Test to see if @c usrNname has been set.
@property(nonatomic, readwrite) BOOL hasUsrNname;

@end

#pragma mark - Logout

typedef GPB_ENUM(Logout_FieldNumber) {
  Logout_FieldNumber_UsrFrom = 1,
  Logout_FieldNumber_UsrToken = 2,
};

@interface Logout : GPBMessage

/// user id sending from
@property(nonatomic, readwrite, copy, null_resettable) NSString *usrFrom;
/// Test to see if @c usrFrom has been set.
@property(nonatomic, readwrite) BOOL hasUsrFrom;

/// user token
@property(nonatomic, readwrite, copy, null_resettable) NSString *usrToken;
/// Test to see if @c usrToken has been set.
@property(nonatomic, readwrite) BOOL hasUsrToken;

@end

#pragma mark - Keep

typedef GPB_ENUM(Keep_FieldNumber) {
  Keep_FieldNumber_UsrFrom = 1,
};

@interface Keep : GPBMessage

/// user id sending from
@property(nonatomic, readwrite, copy, null_resettable) NSString *usrFrom;
/// Test to see if @c usrFrom has been set.
@property(nonatomic, readwrite) BOOL hasUsrFrom;

@end

#pragma mark - MeetMsg

typedef GPB_ENUM(MeetMsg_FieldNumber) {
  MeetMsg_FieldNumber_MsgHead = 1,
  MeetMsg_FieldNumber_MsgTag = 2,
  MeetMsg_FieldNumber_MsgType = 3,
  MeetMsg_FieldNumber_UsrFrom = 4,
  MeetMsg_FieldNumber_MsgCont = 5,
  MeetMsg_FieldNumber_RomId = 6,
  MeetMsg_FieldNumber_RomName = 7,
  MeetMsg_FieldNumber_NckName = 8,
  MeetMsg_FieldNumber_UsrToken = 9,
  MeetMsg_FieldNumber_MsgSeqs = 10,
  MeetMsg_FieldNumber_MemNum = 11,
  MeetMsg_FieldNumber_UsrToto = 12,
};

@interface MeetMsg : GPBMessage

/// msg type
@property(nonatomic, readwrite) enum EMsgHead msgHead;

@property(nonatomic, readwrite) BOOL hasMsgHead;
/// msg tag
@property(nonatomic, readwrite) enum EMsgTag msgTag;

@property(nonatomic, readwrite) BOOL hasMsgTag;
/// msg type
@property(nonatomic, readwrite) enum EMsgType msgType;

@property(nonatomic, readwrite) BOOL hasMsgType;
/// user id sending from
@property(nonatomic, readwrite, copy, null_resettable) NSString *usrFrom;
/// Test to see if @c usrFrom has been set.
@property(nonatomic, readwrite) BOOL hasUsrFrom;

/// msg content
@property(nonatomic, readwrite, copy, null_resettable) NSString *msgCont;
/// Test to see if @c msgCont has been set.
@property(nonatomic, readwrite) BOOL hasMsgCont;

/// user room id
@property(nonatomic, readwrite, copy, null_resettable) NSString *romId;
/// Test to see if @c romId has been set.
@property(nonatomic, readwrite) BOOL hasRomId;

/// user room name
@property(nonatomic, readwrite, copy, null_resettable) NSString *romName;
/// Test to see if @c romName has been set.
@property(nonatomic, readwrite) BOOL hasRomName;

/// user nick name
@property(nonatomic, readwrite, copy, null_resettable) NSString *nckName;
/// Test to see if @c nckName has been set.
@property(nonatomic, readwrite) BOOL hasNckName;

/// user token
@property(nonatomic, readwrite, copy, null_resettable) NSString *usrToken;
/// Test to see if @c usrToken has been set.
@property(nonatomic, readwrite) BOOL hasUsrToken;

/// msg sequence number
@property(nonatomic, readwrite) int64_t msgSeqs;

@property(nonatomic, readwrite) BOOL hasMsgSeqs;
/// room member number
@property(nonatomic, readwrite) int32_t memNum;

@property(nonatomic, readwrite) BOOL hasMemNum;
/// user ids sending to, the string from pms::ToUser
@property(nonatomic, readwrite, strong, null_resettable) ToUser *usrToto;
/// Test to see if @c usrToto has been set.
@property(nonatomic, readwrite) BOOL hasUsrToto;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
